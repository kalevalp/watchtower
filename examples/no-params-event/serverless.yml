service: wt-no-params

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: test

functions:
  hello:
    handler: handler-wrapper.hello
    events:
      - http:
          path: microbmark
          method: get
    environment:
      WATCHTOWER_EVENT_KINESIS_STREAM:
        Ref: EventsStream
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]



  ########################################
  ## Watchtower Functions
  ##
  ##
  ##   Log Ingestion Dummy
  watchtower-ingestion: 
    handler: dummy-ingestion.handler
    events:
    - stream:
        arn:
          'Fn::GetAtt': [ EventsStream, Arn ]
        type: kinesis
        enabled: true
        startingPosition: TRIM_HORIZON
  ##   Log Ingestion
  # watchtower-ingestion: 
  #   handler: watchtower-log-ingestion.handler
  #   events:
  #   - stream:
  #       arn:
  #         'Fn::GetAtt': [ EventsStream, Arn ]
  #       type: kinesis
  #       enabled: true
  #       startingPosition: TRIM_HORIZON
  #   role:
  #     'Fn::GetAtt': [ EventWriterRole, Arn ]
  #   environment:
  #     WATCHTOWER_EVENT_TABLE:
  #       Ref: EventsTable
  #     WATCHTOWER_INVOCATION_STREAM:
  #       Ref: InvocationStream
  #     WATCHTOWER_PROPERTY_INSTANCE_TABLE:
  #       Ref: InstancesTable
  #     DEBUG_WATCHTOWER: 1
  # ##
  # ##   Log Checker
  # watchtower-monitor:
  #   handler: watchtower-monitor.handler
  #   events:
  #   - stream:
  #       arn:
  #         'Fn::GetAtt': [ InvocationStream, Arn ]
  #       type: kinesis
  #       enabled: true
  #       startingPosition: TRIM_HORIZON
  #   environment:
  #     WATCHTOWER_EVENT_TABLE:
  #       Ref: EventsTable
  #     WATCHTOWER_INVOCATION_STREAM:
  #       Ref: InvocationStream
  #     WATCHTOWER_PROPERTY_INSTANCE_TABLE:
  #       Ref: InstancesTable
  #     DEBUG_WATCHTOWER: 1
  #   role:
  #     'Fn::GetAtt': [ EventReaderRole, Arn ]     
  # ##
  # ## END of Watchtower Functions
  # ########################################


resources:
  Resources:
    ########################################
    ## Watchtower Resources
    ##
    # ##   Invocation Kinesis Stream
    # InvocationStream:
    #   Type: 'AWS::Kinesis::Stream'
    #   Properties:
    #     Name: Watchtower${self:provider.stage}InvocationStream
    #     ShardCount: 10
    ##
    ##   Events Kinesis Stream
    EventsStream:
      Type: 'AWS::Kinesis::Stream'
      Properties:
        Name: Watchtower${self:provider.stage}EventsStream
        ShardCount: 10
    # ##
    # ##   Events DynamoDB Table 
    # EventsTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #     - AttributeName: propinst
    #       AttributeType: S
    #     - AttributeName: id
    #       AttributeType: S
    #     KeySchema:
    #     - AttributeName: propinst
    #       KeyType: HASH
    #     - AttributeName: id
    #       KeyType: RANGE
    #     BillingMode: PAY_PER_REQUEST 
    #     TableName: Watchtower-${self:provider.stage}-MonitoredEvents
    # ##
    # ##   Property Instances DynamoDB Table 
    # InstancesTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #     - AttributeName: propinst
    #       AttributeType: S
    #     - AttributeName: id
    #       AttributeType: S
    #     KeySchema:
    #     - AttributeName: propinst
    #       KeyType: HASH
    #     - AttributeName: id
    #       KeyType: RANGE
    #     BillingMode: PAY_PER_REQUEST 
    #     TableName: Watchtower-${self:provider.stage}-PropertyInstances
    # ##
    # ##   Event-Writer IAM Role
    # EventWriterRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:provider.stage}EventWriterRole
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #       - Effect: Allow
    #         Action: sts:AssumeRole
    #         Principal:
    #           Service: lambda.amazonaws.com
    #     ManagedPolicyArns:
    #     - arn:aws:iam::aws:policy/AdministratorAccess
    #     Policies:
    #       - PolicyName: BatchWriteToEventTable
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #           -  Effect: Allow
    #              Action:
    #              - 'dynamodb:BatchWriteItem'
    #              Resource:
    #                Fn::GetAtt: [EventsTable, Arn]
    # ##
    # ## Event-Reader IAM Role
    # EventReaderRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:provider.stage}EventReaderRole
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #       - Effect: Allow
    #         Action: sts:AssumeRole
    #         Principal:
    #           Service: lambda.amazonaws.com
    #     ManagedPolicyArns:
    #     - arn:aws:iam::aws:policy/AdministratorAccess
    #     Policies:
    #       - PolicyName: QueryEventTable
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #           -  Effect: Allow
    #              Action:
    #              - 'dynamodb:Query'
    #              Resource:
    #                Fn::GetAtt: [EventsTable, Arn]
    # ##
    # ##   PropInstance-Writer IAM Role
    # PropInstanceWriterRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:provider.stage}PropInstanceWriterRole
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #       - Effect: Allow
    #         Action: sts:AssumeRole
    #         Principal:
    #           Service: lambda.amazonaws.com
    #     ManagedPolicyArns:
    #     - arn:aws:iam::aws:policy/AdministratorAccess
    #     Policies:
    #       - PolicyName: BatchWriteToPropInstanceTable
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #           -  Effect: Allow
    #              Action:
    #              - 'dynamodb:BatchWriteItem'
    #              Resource:
    #                Fn::GetAtt: [InstancesTable, Arn]
    # ##
    # ## EventPropInstance-Reader IAM Role
    # PropInstanceReaderRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:provider.stage}PropInstanceReaderRole
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #       - Effect: Allow
    #         Action: sts:AssumeRole
    #         Principal:
    #           Service: lambda.amazonaws.com
    #     ManagedPolicyArns:
    #     - arn:aws:iam::aws:policy/AdministratorAccess
    #     Policies:
    #       - PolicyName: QueryEventTable
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #           -  Effect: Allow
    #              Action:
    #              - 'dynamodb:Query'
    #              Resource:
    #                Fn::GetAtt: [InstancesTable, Arn]
    # ## 
    # ## Invocation Kinesis Stream Writer Role
    # InvocationStreamWriter:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:provider.stage}InvocationStreamWriter
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Action: sts:AssumeRole
    #           Principal:
    #             Service: lambda.amazonaws.com
    #     ManagedPolicyArns:
    #       - arn:aws:iam::aws:policy/AdministratorAccess
    #     Policies:
    #       - PolicyName: WriteToStream
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #             -  Effect: Allow
    #                Action:
    #                  - 'kinesis:DescribeStream'
    #                  - 'kinesis:PutRecord'
    #                  - 'kinesis:PutRecords'
    #                Resource:
    #                  Fn::GetAtt: [InvocationStream, Arn]
    ## 
    ## Event Kinesis Stream Writer Role
    EventsStreamWriter:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stage}EventsStreamWriter
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: WriteToStream
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -  Effect: Allow
                   Action:
                     - 'kinesis:DescribeStream'
                     - 'kinesis:PutRecord'
                     - 'kinesis:PutRecords'
                   Resource:
                     Fn::GetAtt: [EventsStream, Arn]
    ##
    ## END of Watchtower Resources
    ########################################
