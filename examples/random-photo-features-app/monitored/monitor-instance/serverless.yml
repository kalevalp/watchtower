service: random-features-log-monitor

custom: ${file(../shared.yml)}

provider:
  name: aws
  runtime: nodejs8.10
  deploymentBucket: ${self:custom.deploymentBucket}
  stage: ${self:custom.stage}
  profile: ${self:custom.profile}
  region: ${self:custom.region}

functions:
  monitor:
    handler: handler.handler
    events:
    - stream:
        arn:
          Fn::ImportValue: ${self:custom.invocationStream.exportInvocationStreamArn}
        type: kinesis
        enabled: true
        startingPosition: TRIM_HORIZON
    environment:
      EVENT_TABLE:
        Fn::ImportValue: ${self:custom.eventsTable.exportEventsTableName}
    role:
      'Fn::GetAtt': [ EventReaderRole, Arn ]

#resources:
#  Resources:
#    # Role for consumers
#    InvocationStreamReader:
#      Type: AWS::IAM::Role
#      Properties:
#        Path: /
#        RoleName: ${self:custom.stage}InvocationStreamReader
#        AssumeRolePolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#            - Effect: Allow
#              Action: sts:AssumeRole
#              Principal:
#                Service: lambda.amazonaws.com
#        ManagedPolicyArns:
#          - arn:aws:iam::aws:policy/AdministratorAccess
#        Policies:
#          - PolicyName: ReadFromStream
#            PolicyDocument:
#              Version: '2012-10-17'
#              Statement:
#                -  Effect: Allow
#                   Action:
#                     - 'kinesis:DescribeStream'
#                     - 'kinesis:GetRecords'
#                     - 'kinesis:GetShardIterator'
#                     - 'kinesis:ListStreams'
#                   Resource:
#                     Fn::ImportValue: ${self:custom.invocationStream.exportInvocationStreamArn}
#


resources:
  Resources:
    EventReaderRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.stage}EventReaderRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: QueryEventTable
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              -  Effect: Allow
                 Action:
                 - 'dynamodb:Query'
                 Resource:
                   Fn::ImportValue: ${self:custom.eventsTable.exportEventsTableArn}
#                   'Fn::GetAtt': [ EventReaderRole, Arn ]
#                   Fn::Join:
#                   - '/'
#                   - - 'arn:aws:dynamodb:${self:provider.region}:${self:custom.private.account}:table'
#                     - Ref: EventsTable
